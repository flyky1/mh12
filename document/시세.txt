TR명
주식호가요청
ka10004

import requests
import json

# 주식호가요청
def fn_ka10004(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10004', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'stk_cd': '005930', # 종목코드 거래소별 종목코드 (KRX:039490,NXT:039490_NX,SOR:039490_AL)
	}

	# 3. API 실행
	fn_ka10004(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10004(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_cd	종목코드	String	Y	20	거래소별 종목코드
(KRX:039490,NXT:039490_NX,SOR:039490_AL)
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
bid_req_base_tm	호가잔량기준시간	String	N	20	호가시간
sel_10th_pre_req_pre	매도10차선잔량대비	String	N	20	매도호가직전대비10
sel_10th_pre_req	매도10차선잔량	String	N	20	매도호가수량10
sel_10th_pre_bid	매도10차선호가	String	N	20	매도호가10
sel_9th_pre_req_pre	매도9차선잔량대비	String	N	20	매도호가직전대비9
sel_9th_pre_req	매도9차선잔량	String	N	20	매도호가수량9
sel_9th_pre_bid	매도9차선호가	String	N	20	매도호가9
sel_8th_pre_req_pre	매도8차선잔량대비	String	N	20	매도호가직전대비8
sel_8th_pre_req	매도8차선잔량	String	N	20	매도호가수량8
sel_8th_pre_bid	매도8차선호가	String	N	20	매도호가8
sel_7th_pre_req_pre	매도7차선잔량대비	String	N	20	매도호가직전대비7
sel_7th_pre_req	매도7차선잔량	String	N	20	매도호가수량7
sel_7th_pre_bid	매도7차선호가	String	N	20	매도호가7
sel_6th_pre_req_pre	매도6차선잔량대비	String	N	20	매도호가직전대비6
sel_6th_pre_req	매도6차선잔량	String	N	20	매도호가수량6
sel_6th_pre_bid	매도6차선호가	String	N	20	매도호가6
sel_5th_pre_req_pre	매도5차선잔량대비	String	N	20	매도호가직전대비5
sel_5th_pre_req	매도5차선잔량	String	N	20	매도호가수량5
sel_5th_pre_bid	매도5차선호가	String	N	20	매도호가5
sel_4th_pre_req_pre	매도4차선잔량대비	String	N	20	매도호가직전대비4
sel_4th_pre_req	매도4차선잔량	String	N	20	매도호가수량4
sel_4th_pre_bid	매도4차선호가	String	N	20	매도호가4
sel_3th_pre_req_pre	매도3차선잔량대비	String	N	20	매도호가직전대비3
sel_3th_pre_req	매도3차선잔량	String	N	20	매도호가수량3
sel_3th_pre_bid	매도3차선호가	String	N	20	매도호가3
sel_2th_pre_req_pre	매도2차선잔량대비	String	N	20	매도호가직전대비2
sel_2th_pre_req	매도2차선잔량	String	N	20	매도호가수량2
sel_2th_pre_bid	매도2차선호가	String	N	20	매도호가2
sel_1th_pre_req_pre	매도1차선잔량대비	String	N	20	매도호가직전대비1
sel_fpr_req	매도최우선잔량	String	N	20	매도호가수량1
sel_fpr_bid	매도최우선호가	String	N	20	매도호가1
buy_fpr_bid	매수최우선호가	String	N	20	매수호가1
buy_fpr_req	매수최우선잔량	String	N	20	매수호가수량1
buy_1th_pre_req_pre	매수1차선잔량대비	String	N	20	매수호가직전대비1
buy_2th_pre_bid	매수2차선호가	String	N	20	매수호가2
buy_2th_pre_req	매수2차선잔량	String	N	20	매수호가수량2
buy_2th_pre_req_pre	매수2차선잔량대비	String	N	20	매수호가직전대비2
buy_3th_pre_bid	매수3차선호가	String	N	20	매수호가3
buy_3th_pre_req	매수3차선잔량	String	N	20	매수호가수량3
buy_3th_pre_req_pre	매수3차선잔량대비	String	N	20	매수호가직전대비3
buy_4th_pre_bid	매수4차선호가	String	N	20	매수호가4
buy_4th_pre_req	매수4차선잔량	String	N	20	매수호가수량4
buy_4th_pre_req_pre	매수4차선잔량대비	String	N	20	매수호가직전대비4
buy_5th_pre_bid	매수5차선호가	String	N	20	매수호가5
buy_5th_pre_req	매수5차선잔량	String	N	20	매수호가수량5
buy_5th_pre_req_pre	매수5차선잔량대비	String	N	20	매수호가직전대비5
buy_6th_pre_bid	매수6차선호가	String	N	20	매수호가6
buy_6th_pre_req	매수6차선잔량	String	N	20	매수호가수량6
buy_6th_pre_req_pre	매수6차선잔량대비	String	N	20	매수호가직전대비6
buy_7th_pre_bid	매수7차선호가	String	N	20	매수호가7
buy_7th_pre_req	매수7차선잔량	String	N	20	매수호가수량7
buy_7th_pre_req_pre	매수7차선잔량대비	String	N	20	매수호가직전대비7
buy_8th_pre_bid	매수8차선호가	String	N	20	매수호가8
buy_8th_pre_req	매수8차선잔량	String	N	20	매수호가수량8
buy_8th_pre_req_pre	매수8차선잔량대비	String	N	20	매수호가직전대비8
buy_9th_pre_bid	매수9차선호가	String	N	20	매수호가9
buy_9th_pre_req	매수9차선잔량	String	N	20	매수호가수량9
buy_9th_pre_req_pre	매수9차선잔량대비	String	N	20	매수호가직전대비9
buy_10th_pre_bid	매수10차선호가	String	N	20	매수호가10
buy_10th_pre_req	매수10차선잔량	String	N	20	매수호가수량10
buy_10th_pre_req_pre	매수10차선잔량대비	String	N	20	매수호가직전대비10
tot_sel_req_jub_pre	총매도잔량직전대비	String	N	20	매도호가총잔량직전대비
tot_sel_req	총매도잔량	String	N	20	매도호가총잔량
tot_buy_req	총매수잔량	String	N	20	매수호가총잔량
tot_buy_req_jub_pre	총매수잔량직전대비	String	N	20	매수호가총잔량직전대비
ovt_sel_req_pre	시간외매도잔량대비	String	N	20	시간외 매도호가 총잔량 직전대비
ovt_sel_req	시간외매도잔량	String	N	20	시간외 매도호가 총잔량
ovt_buy_req	시간외매수잔량	String	N	20	시간외 매수호가 총잔량
ovt_buy_req_pre	시간외매수잔량대비	String	N	20	시간외 매수호가 총잔량 직전대비

TR명
주식일주월시분요청
ka10005

import requests
import json

# 주식일주월시분요청
def fn_ka10005(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10005', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'stk_cd': '005930', # 종목코드 거래소별 종목코드 (KRX:039490,NXT:039490_NX,SOR:039490_AL)
	}

	# 3. API 실행
	fn_ka10005(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10005(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_cd	종목코드	String	Y	20	거래소별 종목코드
(KRX:039490,NXT:039490_NX,SOR:039490_AL)
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_ddwkmm	주식일주월시분	LIST	N		
- date	날짜	String	N	20	
- open_pric	시가	String	N	20	
- high_pric	고가	String	N	20	
- low_pric	저가	String	N	20	
- close_pric	종가	String	N	20	
- pre	대비	String	N	20	
- flu_rt	등락률	String	N	20	
- trde_qty	거래량	String	N	20	
- trde_prica	거래대금	String	N	20	
- for_poss	외인보유	String	N	20	
- for_wght	외인비중	String	N	20	
- for_netprps	외인순매수	String	N	20	
- orgn_netprps	기관순매수	String	N	20	
- ind_netprps	개인순매수	String	N	20	
- crd_remn_rt	신용잔고율	String	N	20	
- frgn	외국계	String	N	20	
- prm	프로그램	String	N	20	

TR명
주식시분요청
ka10006

import requests
import json

# 주식시분요청
def fn_ka10006(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10006', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'stk_cd': '005930', # 종목코드 거래소별 종목코드 (KRX:039490,NXT:039490_NX,SOR:039490_AL)
	}

	# 3. API 실행
	fn_ka10006(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10006(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_cd	종목코드	String	Y	20	거래소별 종목코드
(KRX:039490,NXT:039490_NX,SOR:039490_AL)
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
date	날짜	String	N	20	
open_pric	시가	String	N	20	
high_pric	고가	String	N	20	
low_pric	저가	String	N	20	
close_pric	종가	String	N	20	
pre	대비	String	N	20	
flu_rt	등락률	String	N	20	
trde_qty	거래량	String	N	20	
trde_prica	거래대금	String	N	20	
cntr_str	체결강도	String	N	20	

TR명
시세표성정보요청
ka10007


import requests
import json

# 시세표성정보요청
def fn_ka10007(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10007', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'stk_cd': '005930', # 종목코드 거래소별 종목코드 (KRX:039490,NXT:039490_NX,SOR:039490_AL)
	}

	# 3. API 실행
	fn_ka10007(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10007(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_cd	종목코드	String	Y	20	거래소별 종목코드
(KRX:039490,NXT:039490_NX,SOR:039490_AL)
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_nm	종목명	String	N	20	
stk_cd	종목코드	String	N	6	
date	날짜	String	N	20	
tm	시간	String	N	20	
pred_close_pric	전일종가	String	N	20	
pred_trde_qty	전일거래량	String	N	20	
upl_pric	상한가	String	N	20	
lst_pric	하한가	String	N	20	
pred_trde_prica	전일거래대금	String	N	20	
flo_stkcnt	상장주식수	String	N	20	
cur_prc	현재가	String	N	20	
smbol	부호	String	N	20	
flu_rt	등락률	String	N	20	
pred_rt	전일비	String	N	20	
open_pric	시가	String	N	20	
high_pric	고가	String	N	20	
low_pric	저가	String	N	20	
cntr_qty	체결량	String	N	20	
trde_qty	거래량	String	N	20	
trde_prica	거래대금	String	N	20	
exp_cntr_pric	예상체결가	String	N	20	
exp_cntr_qty	예상체결량	String	N	20	
exp_sel_pri_bid	예상매도우선호가	String	N	20	
exp_buy_pri_bid	예상매수우선호가	String	N	20	
trde_strt_dt	거래시작일	String	N	20	
exec_pric	행사가격	String	N	20	
hgst_pric	최고가	String	N	20	
lwst_pric	최저가	String	N	20	
hgst_pric_dt	최고가일	String	N	20	
lwst_pric_dt	최저가일	String	N	20	
sel_1bid	매도1호가	String	N	20	
sel_2bid	매도2호가	String	N	20	
sel_3bid	매도3호가	String	N	20	
sel_4bid	매도4호가	String	N	20	
sel_5bid	매도5호가	String	N	20	
sel_6bid	매도6호가	String	N	20	
sel_7bid	매도7호가	String	N	20	
sel_8bid	매도8호가	String	N	20	
sel_9bid	매도9호가	String	N	20	
sel_10bid	매도10호가	String	N	20	
buy_1bid	매수1호가	String	N	20	
buy_2bid	매수2호가	String	N	20	
buy_3bid	매수3호가	String	N	20	
buy_4bid	매수4호가	String	N	20	
buy_5bid	매수5호가	String	N	20	
buy_6bid	매수6호가	String	N	20	
buy_7bid	매수7호가	String	N	20	
buy_8bid	매수8호가	String	N	20	
buy_9bid	매수9호가	String	N	20	
buy_10bid	매수10호가	String	N	20	
sel_1bid_req	매도1호가잔량	String	N	20	
sel_2bid_req	매도2호가잔량	String	N	20	
sel_3bid_req	매도3호가잔량	String	N	20	
sel_4bid_req	매도4호가잔량	String	N	20	
sel_5bid_req	매도5호가잔량	String	N	20	
sel_6bid_req	매도6호가잔량	String	N	20	
sel_7bid_req	매도7호가잔량	String	N	20	
sel_8bid_req	매도8호가잔량	String	N	20	
sel_9bid_req	매도9호가잔량	String	N	20	
sel_10bid_req	매도10호가잔량	String	N	20	
buy_1bid_req	매수1호가잔량	String	N	20	
buy_2bid_req	매수2호가잔량	String	N	20	
buy_3bid_req	매수3호가잔량	String	N	20	
buy_4bid_req	매수4호가잔량	String	N	20	
buy_5bid_req	매수5호가잔량	String	N	20	
buy_6bid_req	매수6호가잔량	String	N	20	
buy_7bid_req	매수7호가잔량	String	N	20	
buy_8bid_req	매수8호가잔량	String	N	20	
buy_9bid_req	매수9호가잔량	String	N	20	
buy_10bid_req	매수10호가잔량	String	N	20	
sel_1bid_jub_pre	매도1호가직전대비	String	N	20	
sel_2bid_jub_pre	매도2호가직전대비	String	N	20	
sel_3bid_jub_pre	매도3호가직전대비	String	N	20	
sel_4bid_jub_pre	매도4호가직전대비	String	N	20	
sel_5bid_jub_pre	매도5호가직전대비	String	N	20	
sel_6bid_jub_pre	매도6호가직전대비	String	N	20	
sel_7bid_jub_pre	매도7호가직전대비	String	N	20	
sel_8bid_jub_pre	매도8호가직전대비	String	N	20	
sel_9bid_jub_pre	매도9호가직전대비	String	N	20	
sel_10bid_jub_pre	매도10호가직전대비	String	N	20	
buy_1bid_jub_pre	매수1호가직전대비	String	N	20	
buy_2bid_jub_pre	매수2호가직전대비	String	N	20	
buy_3bid_jub_pre	매수3호가직전대비	String	N	20	
buy_4bid_jub_pre	매수4호가직전대비	String	N	20	
buy_5bid_jub_pre	매수5호가직전대비	String	N	20	
buy_6bid_jub_pre	매수6호가직전대비	String	N	20	
buy_7bid_jub_pre	매수7호가직전대비	String	N	20	
buy_8bid_jub_pre	매수8호가직전대비	String	N	20	
buy_9bid_jub_pre	매수9호가직전대비	String	N	20	
buy_10bid_jub_pre	매수10호가직전대비	String	N	20	
sel_1bid_cnt	매도1호가건수	String	N	20	
sel_2bid_cnt	매도2호가건수	String	N	20	
sel_3bid_cnt	매도3호가건수	String	N	20	
sel_4bid_cnt	매도4호가건수	String	N	20	
sel_5bid_cnt	매도5호가건수	String	N	20	
buy_1bid_cnt	매수1호가건수	String	N	20	
buy_2bid_cnt	매수2호가건수	String	N	20	
buy_3bid_cnt	매수3호가건수	String	N	20	
buy_4bid_cnt	매수4호가건수	String	N	20	
buy_5bid_cnt	매수5호가건수	String	N	20	
lpsel_1bid_req	LP매도1호가잔량	String	N	20	
lpsel_2bid_req	LP매도2호가잔량	String	N	20	
lpsel_3bid_req	LP매도3호가잔량	String	N	20	
lpsel_4bid_req	LP매도4호가잔량	String	N	20	
lpsel_5bid_req	LP매도5호가잔량	String	N	20	
lpsel_6bid_req	LP매도6호가잔량	String	N	20	
lpsel_7bid_req	LP매도7호가잔량	String	N	20	
lpsel_8bid_req	LP매도8호가잔량	String	N	20	
lpsel_9bid_req	LP매도9호가잔량	String	N	20	
lpsel_10bid_req	LP매도10호가잔량	String	N	20	
lpbuy_1bid_req	LP매수1호가잔량	String	N	20	
lpbuy_2bid_req	LP매수2호가잔량	String	N	20	
lpbuy_3bid_req	LP매수3호가잔량	String	N	20	
lpbuy_4bid_req	LP매수4호가잔량	String	N	20	
lpbuy_5bid_req	LP매수5호가잔량	String	N	20	
lpbuy_6bid_req	LP매수6호가잔량	String	N	20	
lpbuy_7bid_req	LP매수7호가잔량	String	N	20	
lpbuy_8bid_req	LP매수8호가잔량	String	N	20	
lpbuy_9bid_req	LP매수9호가잔량	String	N	20	
lpbuy_10bid_req	LP매수10호가잔량	String	N	20	
tot_buy_req	총매수잔량	String	N	20	
tot_sel_req	총매도잔량	String	N	20	
tot_buy_cnt	총매수건수	String	N	20	
tot_sel_cnt	총매도건수	String	N	20

TR명
신주인수권전체시세요청
ka10011

import requests
import json

# 신주인수권전체시세요청
def fn_ka10011(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10011', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'newstk_recvrht_tp': '00', # 신주인수권구분 00:전체, 05:신주인수권증권, 07:신주인수권증서
	}

	# 3. API 실행
	fn_ka10011(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10011(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
newstk_recvrht_tp	신주인수권구분	String	Y	2	00:전체, 05:신주인수권증권, 07:신주인수권증서
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
newstk_recvrht_mrpr	신주인수권시세	LIST	N		
- stk_cd	종목코드	String	N	20	
- stk_nm	종목명	String	N	20	
- cur_prc	현재가	String	N	20	
- pred_pre_sig	전일대비기호	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락율	String	N	20	
- fpr_sel_bid	최우선매도호가	String	N	20	
- fpr_buy_bid	최우선매수호가	String	N	20	
- acc_trde_qty	누적거래량	String	N	20	
- open_pric	시가	String	N	20	
- high_pric	고가	String	N	20	
- low_pric	저가	String	N	20	

ka10044
TR명
일별기관매매종목요청

import requests
import json

# 일별기관매매종목요청
def fn_ka10044(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10044', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'strt_dt': '20241106', # 시작일자 YYYYMMDD 
		'end_dt': '20241107', # 종료일자 YYYYMMDD 
		'trde_tp': '1', # 매매구분 1:순매도, 2:순매수
		'mrkt_tp': '001', # 시장구분 001:코스피, 101:코스닥
		'stex_tp': '3', # 거래소구분 1:KRX, 2:NXT 3.통합
	}

	# 3. API 실행
	fn_ka10044(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10044(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
strt_dt	시작일자	String	Y	8	YYYYMMDD
end_dt	종료일자	String	Y	8	YYYYMMDD
trde_tp	매매구분	String	Y	1	1:순매도, 2:순매수
mrkt_tp	시장구분	String	Y	3	001:코스피, 101:코스닥
stex_tp	거래소구분	String	Y	1	1:KRX, 2:NXT 3.통합
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
daly_orgn_trde_stk	일별기관매매종목	LIST	N		
- stk_cd	종목코드	String	N	20	
- stk_nm	종목명	String	N	20	
- netprps_qty	순매수수량	String	N	20	
- netprps_amt	순매수금액	String	N	20

ka10045
TR명
종목별기관매매추이요청

import requests
import json

# 종목별기관매매추이요청
def fn_ka10045(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10045', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'stk_cd': '005930', # 종목코드 거래소별 종목코드 (KRX:039490,NXT:039490_NX,SOR:039490_AL)
		'strt_dt': '20241007', # 시작일자 YYYYMMDD 
		'end_dt': '20241107', # 종료일자 YYYYMMDD 
		'orgn_prsm_unp_tp': '1', # 기관추정단가구분 1:매수단가, 2:매도단가
		'for_prsm_unp_tp': '1', # 외인추정단가구분 1:매수단가, 2:매도단가
	}

	# 3. API 실행
	fn_ka10045(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10045(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_cd	종목코드	String	Y	20	거래소별 종목코드
(KRX:039490,NXT:039490_NX,SOR:039490_AL)
strt_dt	시작일자	String	Y	8	YYYYMMDD
end_dt	종료일자	String	Y	8	YYYYMMDD
orgn_prsm_unp_tp	기관추정단가구분	String	Y	1	1:매수단가, 2:매도단가
for_prsm_unp_tp	외인추정단가구분	String	Y	1	1:매수단가, 2:매도단가
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
orgn_prsm_avg_pric	기관추정평균가	String	N		
for_prsm_avg_pric	외인추정평균가	String	N		
stk_orgn_trde_trnsn	종목별기관매매추이	LIST	N		
- dt	일자	String	N	20	
- close_pric	종가	String	N	20	
- pre_sig	대비기호	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락율	String	N	20	
- trde_qty	거래량	String	N	20	
- orgn_dt_acc	기관기간누적	String	N	20	
- orgn_daly_nettrde_qty	기관일별순매매수량	String	N	20	
- for_dt_acc	외인기간누적	String	N	20	
- for_daly_nettrde_qty	외인일별순매매수량	String	N	20	
- limit_exh_rt	한도소진율	String	N	20	

ka10046
TR명
체결강도추이시간별요청

import requests
import json

# 체결강도추이시간별요청
def fn_ka10046(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10046', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'stk_cd': '005930', # 종목코드 거래소별 종목코드 (KRX:039490,NXT:039490_NX,SOR:039490_AL)
	}

	# 3. API 실행
	fn_ka10046(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10046(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_cd	종목코드	String	Y	6	거래소별 종목코드
(KRX:039490,NXT:039490_NX,SOR:039490_AL)
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
cntr_str_tm	체결강도시간별	LIST	N		
- cntr_tm	체결시간	String	N	20	
- cur_prc	현재가	String	N	20	
- pred_pre	전일대비	String	N	20	
- pred_pre_sig	전일대비기호	String	N	20	
- flu_rt	등락율	String	N	20	
- trde_qty	거래량	String	N	20	
- acc_trde_prica	누적거래대금	String	N	20	
- acc_trde_qty	누적거래량	String	N	20	
- cntr_str	체결강도	String	N	20	
- cntr_str_5min	체결강도5분	String	N	20	
- cntr_str_20min	체결강도20분	String	N	20	
- cntr_str_60min	체결강도60분	String	N	20	
- stex_tp	거래소구분	String	N	20	


ka10047
TR명
체결강도추이일별요청

import requests
import json

# 체결강도추이일별요청
def fn_ka10047(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10047', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'stk_cd': '005930', # 종목코드 거래소별 종목코드 (KRX:039490,NXT:039490_NX,SOR:039490_AL)
	}

	# 3. API 실행
	fn_ka10047(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10047(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_cd	종목코드	String	Y	6	거래소별 종목코드
(KRX:039490,NXT:039490_NX,SOR:039490_AL)
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
cntr_str_daly	체결강도일별	LIST	N		
- dt	일자	String	N	20	
- cur_prc	현재가	String	N	20	
- pred_pre	전일대비	String	N	20	
- pred_pre_sig	전일대비기호	String	N	20	
- flu_rt	등락율	String	N	20	
- trde_qty	거래량	String	N	20	
- acc_trde_prica	누적거래대금	String	N	20	
- acc_trde_qty	누적거래량	String	N	20	
- cntr_str	체결강도	String	N	20	
- cntr_str_5min	체결강도5일	String	N	20	
- cntr_str_20min	체결강도20일	String	N	20	
- cntr_str_60min	체결강도60일	String	N	20

ka10063
TR명
장중투자자별매매요청

import requests
import json

# 장중투자자별매매요청
def fn_ka10063(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10063', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'mrkt_tp': '000', # 시장구분 000:전체, 001:코스피, 101:코스닥
		'amt_qty_tp': '1', # 금액수량구분 1:금액, 2:수량
		'invsr': '6', # 투자자별 6:외국인, 7:기관계, 1:투신, 0:보험, 2:은행, 3:연기금, 4:국가, 5:기타법인
		'frgn_all': '0', # 외국계전체 1:체크, 0:미체크
		'smtm_netprps_tp': '0', # 동시순매수구분 1:체크, 0:미체크
		'stex_tp': '3', # 거래소구분 1:KRX, 2:NXT 3.통합
	}

	# 3. API 실행
	fn_ka10063(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10063(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
mrkt_tp	시장구분	String	Y	3	000:전체, 001:코스피, 101:코스닥
amt_qty_tp	금액수량구분	String	Y	1	1:금액, 2:수량
invsr	투자자별	String	Y	1	6:외국인, 7:기관계, 1:투신, 0:보험, 2:은행, 3:연기금, 4:국가, 5:기타법인
frgn_all	외국계전체	String	Y	1	1:체크, 0:미체크
smtm_netprps_tp	동시순매수구분	String	Y	1	1:체크, 0:미체크
stex_tp	거래소구분	String	Y	1	1:KRX, 2:NXT 3.통합
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
opmr_invsr_trde	장중투자자별매매	LIST	N		
- stk_cd	종목코드	String	N	20	
- stk_nm	종목명	String	N	20	
- cur_prc	현재가	String	N	20	
- pre_sig	대비기호	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락율	String	N	20	
- acc_trde_qty	누적거래량	String	N	20	
- netprps_qty	순매수수량	String	N	20	
- prev_pot_netprps_qty	이전시점순매수수량	String	N	20	
- netprps_irds	순매수증감	String	N	20	
- buy_qty	매수수량	String	N	20	
- buy_qty_irds	매수수량증감	String	N	20	
- sell_qty	매도수량	String	N	20	
- sell_qty_irds	매도수량증감	String	N	20	


ka10066
TR명
장마감후투자자별매매요청

import requests
import json

# 장마감후투자자별매매요청
def fn_ka10066(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10066', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'mrkt_tp': '000', # 시장구분 000:전체, 001:코스피, 101:코스닥
		'amt_qty_tp': '1', # 금액수량구분 1:금액, 2:수량
		'trde_tp': '0', # 매매구분 0:순매수, 1:매수, 2:매도
		'stex_tp': '3', # 거래소구분 1:KRX, 2:NXT 3.통합
	}

	# 3. API 실행
	fn_ka10066(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10066(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
opaf_invsr_trde	장중투자자별매매차트	LIST	N		
- stk_cd	종목코드	String	N	20	
- stk_nm	종목명	String	N	20	
- cur_prc	현재가	String	N	20	
- pre_sig	대비기호	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락률	String	N	20	
- trde_qty	거래량	String	N	20	
- ind_invsr	개인투자자	String	N	20	
- frgnr_invsr	외국인투자자	String	N	20	
- orgn	기관계	String	N	20	
- fnnc_invt	금융투자	String	N	20	
- insrnc	보험	String	N	20	
- invtrt	투신	String	N	20	
- etc_fnnc	기타금융	String	N	20	
- bank	은행	String	N	20	
- penfnd_etc	연기금등	String	N	20	
- samo_fund	사모펀드	String	N	20	
- natn	국가	String	N	20	
- etc_corp	기타법인	String	N	20	


ka10078
TR명
증권사별종목매매동향요청

import requests
import json

# 증권사별종목매매동향요청
def fn_ka10078(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10078', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'mmcm_cd': '001', # 회원사코드 회원사 코드는 ka10102 조회
		'stk_cd': '005930', # 종목코드 거래소별 종목코드 (KRX:039490,NXT:039490_NX,SOR:039490_AL)
		'strt_dt': '20241106', # 시작일자 YYYYMMDD
		'end_dt': '20241107', # 종료일자 YYYYMMDD
	}

	# 3. API 실행
	fn_ka10078(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10078(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
mmcm_cd	회원사코드	String	Y	3	회원사 코드는 ka10102 조회
stk_cd	종목코드	String	Y	20	거래소별 종목코드
(KRX:039490,NXT:039490_NX,SOR:039490_AL)
strt_dt	시작일자	String	Y	8	YYYYMMDD
end_dt	종료일자	String	Y	8	YYYYMMDD
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
sec_stk_trde_trend	증권사별종목매매동향	LIST	N		
- dt	일자	String	N	20	
- cur_prc	현재가	String	N	20	
- pre_sig	대비기호	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락율	String	N	20	
- acc_trde_qty	누적거래량	String	N	20	
- netprps_qty	순매수수량	String	N	20	
- buy_qty	매수수량	String	N	20	
- sell_qty	매도수량	String	N	20	

ka10086
TR명
일별주가요청

import requests
import json

# 일별주가요청
def fn_ka10086(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10086', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'stk_cd': '005930', # 종목코드 거래소별 종목코드 (KRX:039490,NXT:039490_NX,SOR:039490_AL)
		'qry_dt': '20241125', # 조회일자 YYYYMMDD
		'indc_tp': '0', # 표시구분 0:수량, 1:금액(백만원)
	}

	# 3. API 실행
	fn_ka10086(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10086(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_cd	종목코드	String	Y	20	거래소별 종목코드
(KRX:039490,NXT:039490_NX,SOR:039490_AL)
qry_dt	조회일자	String	Y	8	YYYYMMDD
indc_tp	표시구분	String	Y	1	0:수량, 1:금액(백만원)
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
daly_stkpc	일별주가	LIST	N		
- date	날짜	String	N	20	
- open_pric	시가	String	N	20	
- high_pric	고가	String	N	20	
- low_pric	저가	String	N	20	
- close_pric	종가	String	N	20	
- pred_rt	전일비	String	N	20	
- flu_rt	등락률	String	N	20	
- trde_qty	거래량	String	N	20	
- amt_mn	금액(백만)	String	N	20	
- crd_rt	신용비	String	N	20	
- ind	개인	String	N	20	
- orgn	기관	String	N	20	
- for_qty	외인수량	String	N	20	
- frgn	외국계	String	N	20	
- prm	프로그램	String	N	20	
- for_rt	외인비	String	N	20	
- for_poss	외인보유	String	N	20	
- for_wght	외인비중	String	N	20	
- for_netprps	외인순매수	String	N	20	
- orgn_netprps	기관순매수	String	N	20	
- ind_netprps	개인순매수	String	N	20	
- crd_remn_rt	신용잔고율	String	N	20	

ka10087
TR명
시간외단일가요청

import requests
import json

# 시간외단일가요청
def fn_ka10087(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10087', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'stk_cd': '005930', # 종목코드 
	}

	# 3. API 실행
	fn_ka10087(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10087(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_cd	종목코드	String	Y	6	
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
bid_req_base_tm	호가잔량기준시간	String	N		
ovt_sigpric_sel_bid_jub_pre_5	시간외단일가_매도호가직전대비5	String	N		
ovt_sigpric_sel_bid_jub_pre_4	시간외단일가_매도호가직전대비4	String	N		
ovt_sigpric_sel_bid_jub_pre_3	시간외단일가_매도호가직전대비3	String	N		
ovt_sigpric_sel_bid_jub_pre_2	시간외단일가_매도호가직전대비2	String	N		
ovt_sigpric_sel_bid_jub_pre_1	시간외단일가_매도호가직전대비1	String	N		
ovt_sigpric_sel_bid_qty_5	시간외단일가_매도호가수량5	String	N		
ovt_sigpric_sel_bid_qty_4	시간외단일가_매도호가수량4	String	N		
ovt_sigpric_sel_bid_qty_3	시간외단일가_매도호가수량3	String	N		
ovt_sigpric_sel_bid_qty_2	시간외단일가_매도호가수량2	String	N		
ovt_sigpric_sel_bid_qty_1	시간외단일가_매도호가수량1	String	N		
ovt_sigpric_sel_bid_5	시간외단일가_매도호가5	String	N		
ovt_sigpric_sel_bid_4	시간외단일가_매도호가4	String	N		
ovt_sigpric_sel_bid_3	시간외단일가_매도호가3	String	N		
ovt_sigpric_sel_bid_2	시간외단일가_매도호가2	String	N		
ovt_sigpric_sel_bid_1	시간외단일가_매도호가1	String	N		
ovt_sigpric_buy_bid_1	시간외단일가_매수호가1	String	N		
ovt_sigpric_buy_bid_2	시간외단일가_매수호가2	String	N		
ovt_sigpric_buy_bid_3	시간외단일가_매수호가3	String	N		
ovt_sigpric_buy_bid_4	시간외단일가_매수호가4	String	N		
ovt_sigpric_buy_bid_5	시간외단일가_매수호가5	String	N		
ovt_sigpric_buy_bid_qty_1	시간외단일가_매수호가수량1	String	N		
ovt_sigpric_buy_bid_qty_2	시간외단일가_매수호가수량2	String	N		
ovt_sigpric_buy_bid_qty_3	시간외단일가_매수호가수량3	String	N		
ovt_sigpric_buy_bid_qty_4	시간외단일가_매수호가수량4	String	N		
ovt_sigpric_buy_bid_qty_5	시간외단일가_매수호가수량5	String	N		
ovt_sigpric_buy_bid_jub_pre_1	시간외단일가_매수호가직전대비1	String	N		
ovt_sigpric_buy_bid_jub_pre_2	시간외단일가_매수호가직전대비2	String	N		
ovt_sigpric_buy_bid_jub_pre_3	시간외단일가_매수호가직전대비3	String	N		
ovt_sigpric_buy_bid_jub_pre_4	시간외단일가_매수호가직전대비4	String	N		
ovt_sigpric_buy_bid_jub_pre_5	시간외단일가_매수호가직전대비5	String	N		
ovt_sigpric_sel_bid_tot_req	시간외단일가_매도호가총잔량	String	N		
ovt_sigpric_buy_bid_tot_req	시간외단일가_매수호가총잔량	String	N		
sel_bid_tot_req_jub_pre	매도호가총잔량직전대비	String	N		
sel_bid_tot_req	매도호가총잔량	String	N		
buy_bid_tot_req	매수호가총잔량	String	N		
buy_bid_tot_req_jub_pre	매수호가총잔량직전대비	String	N		
ovt_sel_bid_tot_req_jub_pre	시간외매도호가총잔량직전대비	String	N		
ovt_sel_bid_tot_req	시간외매도호가총잔량	String	N		
ovt_buy_bid_tot_req	시간외매수호가총잔량	String	N		
ovt_buy_bid_tot_req_jub_pre	시간외매수호가총잔량직전대비	String	N		
ovt_sigpric_cur_prc	시간외단일가_현재가	String	N		
ovt_sigpric_pred_pre_sig	시간외단일가_전일대비기호	String	N		
ovt_sigpric_pred_pre	시간외단일가_전일대비	String	N		
ovt_sigpric_flu_rt	시간외단일가_등락률	String	N		
ovt_sigpric_acc_trde_qty	시간외단일가_누적거래량	String	N		

ka90005
TR명
프로그램매매추이요청 시간대별

import requests
import json

# 프로그램매매추이요청 시간대별
def fn_ka90005(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka90005', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'date': '20241101', # 날짜 YYYYMMDD
		'amt_qty_tp': '1', # 금액수량구분 1:금액(백만원), 2:수량(천주)
		'mrkt_tp': 'P00101', # 시장구분 코스피- 거래소구분값 1일경우:P00101, 2일경우:P001_NX01, 3일경우:P001_AL01
코스닥- 거래소구분값 1일경우:P10102, 2일경우:P101_NX02, 3일경우:P001_AL02
		'min_tic_tp': '1', # 분틱구분 0:틱, 1:분
		'stex_tp': '1', # 거래소구분 1:KRX, 2:NXT 3.통합
	}

	# 3. API 실행
	fn_ka90005(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka90005(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
date	날짜	String	Y	8	YYYYMMDD
amt_qty_tp	금액수량구분	String	Y	1	1:금액(백만원), 2:수량(천주)
mrkt_tp	시장구분	String	Y	10	코스피- 거래소구분값 1일경우:P00101, 2일경우:P001_NX01, 3일경우:P001_AL01 코스닥- 거래소구분값 1일경우:P10102, 2일경우:P101_NX02, 3일경우:P001_AL02
min_tic_tp	분틱구분	String	Y	1	0:틱, 1:분
stex_tp	거래소구분	String	Y	1	1:KRX, 2:NXT 3.통합
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
prm_trde_trnsn	프로그램매매추이	LIST	N		
- cntr_tm	체결시간	String	N	20	
- dfrt_trde_sel	차익거래매도	String	N	20	
- dfrt_trde_buy	차익거래매수	String	N	20	
- dfrt_trde_netprps	차익거래순매수	String	N	20	
- ndiffpro_trde_sel	비차익거래매도	String	N	20	
- ndiffpro_trde_buy	비차익거래매수	String	N	20	
- ndiffpro_trde_netprps	비차익거래순매수	String	N	20	
- dfrt_trde_sell_qty	차익거래매도수량	String	N	20	
- dfrt_trde_buy_qty	차익거래매수수량	String	N	20	
- dfrt_trde_netprps_qty	차익거래순매수수량	String	N	20	
- ndiffpro_trde_sell_qty	비차익거래매도수량	String	N	20	
- ndiffpro_trde_buy_qty	비차익거래매수수량	String	N	20	
- ndiffpro_trde_netprps_qty	비차익거래순매수수량	String	N	20	
- all_sel	전체매도	String	N	20	
- all_buy	전체매수	String	N	20	
- all_netprps	전체순매수	String	N	20	
- kospi200	KOSPI200	String	N	20	
- basis	BASIS	String	N	20	


ka90006
TR명
프로그램매매차익잔고추이요청

import requests
import json

# 프로그램매매차익잔고추이요청
def fn_ka90006(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka90006', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'date': '20241125', # 날짜 YYYYMMDD
		'stex_tp': '1', # 거래소구분 1:KRX, 2:NXT 3.통합
	}

	# 3. API 실행
	fn_ka90006(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka90006(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
date	날짜	String	Y	8	YYYYMMDD
stex_tp	거래소구분	String	Y	1	1:KRX, 2:NXT 3.통합
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
prm_trde_dfrt_remn_trnsn	프로그램매매차익잔고추이	LIST	N		
- dt	일자	String	N	20	
- buy_dfrt_trde_qty	매수차익거래수량	String	N	20	
- buy_dfrt_trde_amt	매수차익거래금액	String	N	20	
- buy_dfrt_trde_irds_amt	매수차익거래증감액	String	N	20	
- sel_dfrt_trde_qty	매도차익거래수량	String	N	20	
- sel_dfrt_trde_amt	매도차익거래금액	String	N	20	
- sel_dfrt_trde_irds_amt	매도차익거래증감액	String	N	20

ka90007
TR명
프로그램매매누적추이요청

import requests
import json

# 프로그램매매누적추이요청
def fn_ka90007(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka90007', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'date': '20240525', # 날짜 YYYYMMDD (종료일기준 1년간 데이터만 조회가능)
		'amt_qty_tp': '1', # 금액수량구분 1:금액, 2:수량
		'mrkt_tp': '0', # 시장구분 0:코스피 , 1:코스닥
		'stex_tp': '3', # 거래소구분 1:KRX, 2:NXT, 3:통합
	}

	# 3. API 실행
	fn_ka90007(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka90007(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
date	날짜	String	Y	8	YYYYMMDD (종료일기준 1년간 데이터만 조회가능)
amt_qty_tp	금액수량구분	String	Y	1	1:금액, 2:수량
mrkt_tp	시장구분	String	Y	5	0:코스피 , 1:코스닥
stex_tp	거래소구분	String	Y	1	1:KRX, 2:NXT, 3:통합
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
prm_trde_acc_trnsn	프로그램매매누적추이	LIST	N		
- dt	일자	String	N	20	
- kospi200	KOSPI200	String	N	20	
- basis	BASIS	String	N	20	
- dfrt_trde_tdy	차익거래당일	String	N	20	
- dfrt_trde_acc	차익거래누적	String	N	20	
- ndiffpro_trde_tdy	비차익거래당일	String	N	20	
- ndiffpro_trde_acc	비차익거래누적	String	N	20	
- all_tdy	전체당일	String	N	20	
- all_acc	전체누적	String	N	20	

TR명
종목시간별프로그램매매추이요청
ka90008

import requests
import json

# 종목시간별프로그램매매추이요청
def fn_ka90008(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka90008', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'amt_qty_tp': '1', # 금액수량구분 1:금액, 2:수량
		'stk_cd': '005930', # 종목코드 거래소별 종목코드 (KRX:039490,NXT:039490_NX,SOR:039490_AL)
		'date': '20241125', # 날짜 YYYYMMDD
	}

	# 3. API 실행
	fn_ka90008(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka90008(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
amt_qty_tp	금액수량구분	String	Y	1	1:금액, 2:수량
stk_cd	종목코드	String	Y	6	거래소별 종목코드
(KRX:039490,NXT:039490_NX,SOR:039490_AL)
date	날짜	String	Y	8	YYYYMMDD
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_tm_prm_trde_trnsn	종목시간별프로그램매매추이	LIST	N		
- tm	시간	String	N	20	
- cur_prc	현재가	String	N	20	
- pre_sig	대비기호	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락율	String	N	20	
- trde_qty	거래량	String	N	20	
- prm_sell_amt	프로그램매도금액	String	N	20	
- prm_buy_amt	프로그램매수금액	String	N	20	
- prm_netprps_amt	프로그램순매수금액	String	N	20	
- prm_netprps_amt_irds	프로그램순매수금액증감	String	N	20	
- prm_sell_qty	프로그램매도수량	String	N	20	
- prm_buy_qty	프로그램매수수량	String	N	20	
- prm_netprps_qty	프로그램순매수수량	String	N	20	
- prm_netprps_qty_irds	프로그램순매수수량증감	String	N	20	
- base_pric_tm	기준가시간	String	N	20	
- dbrt_trde_rpy_sum	대차거래상환주수합	String	N	20	
- remn_rcvord_sum	잔고수주합	String	N	20	
- stex_tp	거래소구분	String	N	20	KRX , NXT , 통합

TR명
프로그램매매추이요청 일자별
ka90010

import requests
import json

# 프로그램매매추이요청 일자별
def fn_ka90010(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka90010', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'date': '20241125', # 날짜 YYYYMMDD
		'amt_qty_tp': '1', # 금액수량구분 1:금액(백만원), 2:수량(천주)
		'mrkt_tp': 'P00101', # 시장구분 코스피- 거래소구분값 1일경우:P00101, 2일경우:P001_NX01, 3일경우:P001_AL01
코스닥- 거래소구분값 1일경우:P10102, 2일경우:P101_NX02, 3일경우:P001_AL02
		'min_tic_tp': '0', # 분틱구분 0:틱, 1:분
		'stex_tp': '1', # 거래소구분 1:KRX, 2:NXT 3.통합
	}

	# 3. API 실행
	fn_ka90010(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka90010(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
date	날짜	String	Y	8	YYYYMMDD
amt_qty_tp	금액수량구분	String	Y	1	1:금액(백만원), 2:수량(천주)
mrkt_tp	시장구분	String	Y	10	코스피- 거래소구분값 1일경우:P00101, 2일경우:P001_NX01, 3일경우:P001_AL01 코스닥- 거래소구분값 1일경우:P10102, 2일경우:P101_NX02, 3일경우:P001_AL02
min_tic_tp	분틱구분	String	Y	1	0:틱, 1:분
stex_tp	거래소구분	String	Y	1	1:KRX, 2:NXT 3.통합
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
prm_trde_trnsn	프로그램매매추이	LIST	N		
- cntr_tm	체결시간	String	N	20	
- dfrt_trde_sel	차익거래매도	String	N	20	
- dfrt_trde_buy	차익거래매수	String	N	20	
- dfrt_trde_netprps	차익거래순매수	String	N	20	
- ndiffpro_trde_sel	비차익거래매도	String	N	20	
- ndiffpro_trde_buy	비차익거래매수	String	N	20	
- ndiffpro_trde_netprps	비차익거래순매수	String	N	20	
- dfrt_trde_sell_qty	차익거래매도수량	String	N	20	
- dfrt_trde_buy_qty	차익거래매수수량	String	N	20	
- dfrt_trde_netprps_qty	차익거래순매수수량	String	N	20	
- ndiffpro_trde_sell_qty	비차익거래매도수량	String	N	20	
- ndiffpro_trde_buy_qty	비차익거래매수수량	String	N	20	
- ndiffpro_trde_netprps_qty	비차익거래순매수수량	String	N	20	
- all_sel	전체매도	String	N	20	
- all_buy	전체매수	String	N	20	
- all_netprps	전체순매수	String	N	20	
- kospi200	KOSPI200	String	N	20	
- basis	BASIS	String	N	20	


TR명
종목일별프로그램매매추이요청
ka90013

import requests
import json

# 종목일별프로그램매매추이요청
def fn_ka90013(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/mrkcond'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka90013', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'amt_qty_tp': '', # 금액수량구분 1:금액, 2:수량
		'stk_cd': '005930', # 종목코드 거래소별 종목코드 (KRX:039490,NXT:039490_NX,SOR:039490_AL)
		'date': '', # 날짜 YYYYMMDD
	}

	# 3. API 실행
	fn_ka90013(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka90013(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
amt_qty_tp	금액수량구분	String	N	1	1:금액, 2:수량
stk_cd	종목코드	String	Y	20	거래소별 종목코드
(KRX:039490,NXT:039490_NX,SOR:039490_AL)
date	날짜	String	N	8	YYYYMMDD
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_daly_prm_trde_trnsn	종목일별프로그램매매추이	LIST	N		
- dt	일자	String	N	20	
- cur_prc	현재가	String	N	20	
- pre_sig	대비기호	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락율	String	N	20	
- trde_qty	거래량	String	N	20	
- prm_sell_amt	프로그램매도금액	String	N	20	
- prm_buy_amt	프로그램매수금액	String	N	20	
- prm_netprps_amt	프로그램순매수금액	String	N	20	
- prm_netprps_amt_irds	프로그램순매수금액증감	String	N	20	
- prm_sell_qty	프로그램매도수량	String	N	20	
- prm_buy_qty	프로그램매수수량	String	N	20	
- prm_netprps_qty	프로그램순매수수량	String	N	20	
- prm_netprps_qty_irds	프로그램순매수수량증감	String	N	20	
- base_pric_tm	기준가시간	String	N	20	
- dbrt_trde_rpy_sum	대차거래상환주수합	String	N	20	
- remn_rcvord_sum	잔고수주합	String	N	20	
- stex_tp	거래소구분	String	N	20	KRX , NXT , 통합