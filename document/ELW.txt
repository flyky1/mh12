ELW일별민감도지표요청
ka10048

import requests
import json

# ELW일별민감도지표요청
def fn_ka10048(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/elw'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10048', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'stk_cd': '57JBHH', # 종목코드 
	}

	# 3. API 실행
	fn_ka10048(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10048(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_cd	종목코드	String	Y	6	
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
elwdaly_snst_ix	ELW일별민감도지표	LIST	N		
- dt	일자	String	N	20	
- iv	IV	String	N	20	
- delta	델타	String	N	20	
- gam	감마	String	N	20	
- theta	쎄타	String	N	20	
- vega	베가	String	N	20	
- law	로	String	N	20	
- lp	LP	String	N	20	


ELW민감도지표요청
ka10050

import requests
import json

# ELW민감도지표요청
def fn_ka10050(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/elw'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10050', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'stk_cd': '57JBHH', # 종목코드 
	}

	# 3. API 실행
	fn_ka10050(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10050(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_cd	종목코드	String	Y	6	
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
elwsnst_ix_array	ELW민감도지표배열	LIST	N		
- cntr_tm	체결시간	String	N	20	
- cur_prc	현재가	String	N	20	
- elwtheory_pric	ELW이론가	String	N	20	
- iv	IV	String	N	20	
- delta	델타	String	N	20	
- gam	감마	String	N	20	
- theta	쎄타	String	N	20	
- vega	베가	String	N	20	
- law	로	String	N	20	
- lp	LP	String	N	20	


ELW가격급등락요청
ka30001

import requests
import json

# ELW가격급등락요청
def fn_ka30001(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/elw'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka30001', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'flu_tp': '1', # 등락구분 1:급등, 2:급락
		'tm_tp': '2', # 시간구분 1:분전, 2:일전
		'tm': '1', # 시간 분 혹은 일입력 (예 1, 3, 5)
		'trde_qty_tp': '0', # 거래량구분 0:전체, 10:만주이상, 50:5만주이상, 100:10만주이상, 300:30만주이상, 500:50만주이상, 1000:백만주이상
		'isscomp_cd': '000000000000', # 발행사코드 전체:000000000000, 한국투자증권:3, 미래대우:5, 신영:6, NK투자증권:12, KB증권:17
		'bsis_aset_cd': '000000000000', # 기초자산코드 전체:000000000000, KOSPI200:201, KOSDAQ150:150, 삼성전자:005930, KT:030200..
		'rght_tp': '000', # 권리구분 000:전체, 001:콜, 002:풋, 003:DC, 004:DP, 005:EX, 006:조기종료콜, 007:조기종료풋
		'lpcd': '000000000000', # LP코드 전체:000000000000, 한국투자증권:3, 미래대우:5, 신영:6, NK투자증권:12, KB증권:17
		'trde_end_elwskip': '0', # 거래종료ELW제외 0:포함, 1:제외
	}

	# 3. API 실행
	fn_ka30001(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka30001(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
flu_tp	등락구분	String	Y	1	1:급등, 2:급락
tm_tp	시간구분	String	Y	1	1:분전, 2:일전
tm	시간	String	Y	2	분 혹은 일입력 (예 1, 3, 5)
trde_qty_tp	거래량구분	String	Y	4	0:전체, 10:만주이상, 50:5만주이상, 100:10만주이상, 300:30만주이상, 500:50만주이상, 1000:백만주이상
isscomp_cd	발행사코드	String	Y	12	전체:000000000000, 한국투자증권:3, 미래대우:5, 신영:6, NK투자증권:12, KB증권:17
bsis_aset_cd	기초자산코드	String	Y	12	전체:000000000000, KOSPI200:201, KOSDAQ150:150, 삼성전자:005930, KT:030200..
rght_tp	권리구분	String	Y	3	000:전체, 001:콜, 002:풋, 003:DC, 004:DP, 005:EX, 006:조기종료콜, 007:조기종료풋
lpcd	LP코드	String	Y	12	전체:000000000000, 한국투자증권:3, 미래대우:5, 신영:6, NK투자증권:12, KB증권:17
trde_end_elwskip	거래종료ELW제외	String	Y	1	0:포함, 1:제외
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
base_pric_tm	기준가시간	String	N	20	
elwpric_jmpflu	ELW가격급등락	LIST	N		
- stk_cd	종목코드	String	N	20	
- rank	순위	String	N	20	
- stk_nm	종목명	String	N	20	
- pre_sig	대비기호	String	N	20	
- pred_pre	전일대비	String	N	20	
- trde_end_elwbase_pric	거래종료ELW기준가	String	N	20	
- cur_prc	현재가	String	N	20	
- base_pre	기준대비	String	N	20	
- trde_qty	거래량	String	N	20	
- jmp_rt	급등율	String	N	20	


거래원별ELW순매매상위요청
ka30002

import requests
import json

# 거래원별ELW순매매상위요청
def fn_ka30002(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/elw'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka30002', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'isscomp_cd': '003', # 발행사코드 3자리, 영웅문4 0273화면참조 (교보:001, 신한금융투자:002, 한국투자증권:003, 대신:004, 미래대우:005, ,,,)
		'trde_qty_tp': '0', # 거래량구분 0:전체, 5:5천주, 10:만주, 50:5만주, 100:10만주, 500:50만주, 1000:백만주
		'trde_tp': '2', # 매매구분 1:순매수, 2:순매도
		'dt': '60', # 기간 1:전일, 5:5일, 10:10일, 40:40일, 60:60일
		'trde_end_elwskip': '0', # 거래종료ELW제외 0:포함, 1:제외
	}

	# 3. API 실행
	fn_ka30002(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka30002(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
isscomp_cd	발행사코드	String	Y	3	3자리, 영웅문4 0273화면참조 (교보:001, 신한금융투자:002, 한국투자증권:003, 대신:004, 미래대우:005, ,,,)
trde_qty_tp	거래량구분	String	Y	4	0:전체, 5:5천주, 10:만주, 50:5만주, 100:10만주, 500:50만주, 1000:백만주
trde_tp	매매구분	String	Y	1	1:순매수, 2:순매도
dt	기간	String	Y	2	1:전일, 5:5일, 10:10일, 40:40일, 60:60일
trde_end_elwskip	거래종료ELW제외	String	Y	1	0:포함, 1:제외
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
trde_ori_elwnettrde_upper	거래원별ELW순매매상위	LIST	N		
- stk_cd	종목코드	String	N	20	
- stk_nm	종목명	String	N	20	
- stkpc_flu	주가등락	String	N	20	
- flu_rt	등락율	String	N	20	
- trde_qty	거래량	String	N	20	
- netprps	순매수	String	N	20	
- buy_trde_qty	매수거래량	String	N	20	
- sel_trde_qty	매도거래량	String	N	20	


ELWLP보유일별추이요청
ka30003

import requests
import json

# ELWLP보유일별추이요청
def fn_ka30003(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/elw'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka30003', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'bsis_aset_cd': '57KJ99', # 기초자산코드 
		'base_dt': '20241122', # 기준일자 YYYYMMDD
	}

	# 3. API 실행
	fn_ka30003(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka30003(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
bsis_aset_cd	기초자산코드	String	Y	12	
base_dt	기준일자	String	Y	8	YYYYMMDD
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
elwlpposs_daly_trnsn	ELWLP보유일별추이	LIST	N		
- dt	일자	String	N	20	
- cur_prc	현재가	String	N	20	
- pre_tp	대비구분	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락율	String	N	20	
- trde_qty	거래량	String	N	20	
- trde_prica	거래대금	String	N	20	
- chg_qty	변동수량	String	N	20	
- lprmnd_qty	LP보유수량	String	N	20	
- wght	비중	String	N	20	


ELW괴리율요청
ka30004

import requests
import json

# ELW괴리율요청
def fn_ka30004(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/elw'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka30004', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'isscomp_cd': '000000000000', # 발행사코드 전체:000000000000, 한국투자증권:3, 미래대우:5, 신영:6, NK투자증권:12, KB증권:17
		'bsis_aset_cd': '000000000000', # 기초자산코드 전체:000000000000, KOSPI200:201, KOSDAQ150:150, 삼성전자:005930, KT:030200..
		'rght_tp': '000', # 권리구분 000: 전체, 001: 콜, 002: 풋, 003: DC, 004: DP, 005: EX, 006: 조기종료콜, 007: 조기종료풋
		'lpcd': '000000000000', # LP코드 전체:000000000000, 한국투자증권:3, 미래대우:5, 신영:6, NK투자증권:12, KB증권:17
		'trde_end_elwskip': '0', # 거래종료ELW제외 1:거래종료ELW제외, 0:거래종료ELW포함
	}

	# 3. API 실행
	fn_ka30004(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka30004(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
isscomp_cd	발행사코드	String	Y	12	전체:000000000000, 한국투자증권:3, 미래대우:5, 신영:6, NK투자증권:12, KB증권:17
bsis_aset_cd	기초자산코드	String	Y	12	전체:000000000000, KOSPI200:201, KOSDAQ150:150, 삼성전자:005930, KT:030200..
rght_tp	권리구분	String	Y	3	000: 전체, 001: 콜, 002: 풋, 003: DC, 004: DP, 005: EX, 006: 조기종료콜, 007: 조기종료풋
lpcd	LP코드	String	Y	12	전체:000000000000, 한국투자증권:3, 미래대우:5, 신영:6, NK투자증권:12, KB증권:17
trde_end_elwskip	거래종료ELW제외	String	Y	1	1:거래종료ELW제외, 0:거래종료ELW포함
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
elwdispty_rt	ELW괴리율	LIST	N		
- stk_cd	종목코드	String	N	20	
- isscomp_nm	발행사명	String	N	20	
- sqnc	회차	String	N	20	
- base_aset_nm	기초자산명	String	N	20	
- rght_tp	권리구분	String	N	20	
- dispty_rt	괴리율	String	N	20	
- basis	베이시스	String	N	20	
- srvive_dys	잔존일수	String	N	20	
- theory_pric	이론가	String	N	20	
- cur_prc	현재가	String	N	20	
- pre_tp	대비구분	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락율	String	N	20	
- trde_qty	거래량	String	N	20	
- stk_nm	종목명	String	N	20	


ELW조건검색요청
ka30005
import requests
import json

# ELW조건검색요청
def fn_ka30005(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/elw'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka30005', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'isscomp_cd': '000000000017', # 발행사코드 12자리입력(전체:000000000000, 한국투자증권:000,,,3, 미래대우:000,,,5, 신영:000,,,6, NK투자증권:000,,,12, KB증권:000,,,17)
		'bsis_aset_cd': '201', # 기초자산코드 전체일때만 12자리입력(전체:000000000000, KOSPI200:201, KOSDAQ150:150, 삼정전자:005930, KT:030200,,)
		'rght_tp': '1', # 권리구분 0:전체, 1:콜, 2:풋, 3:DC, 4:DP, 5:EX, 6:조기종료콜, 7:조기종료풋
		'lpcd': '000000000000', # LP코드 전체일때만 12자리입력(전체:000000000000, 한국투자증권:003, 미래대우:005, 신영:006, NK투자증권:012, KB증권:017)
		'sort_tp': '0', # 정렬구분 0:정렬없음, 1:상승율순, 2:상승폭순, 3:하락율순, 4:하락폭순, 5:거래량순, 6:거래대금순, 7:잔존일순
	}

	# 3. API 실행
	fn_ka30005(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka30005(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
isscomp_cd	발행사코드	String	Y	12	12자리입력(전체:000000000000, 한국투자증권:000,,,3, 미래대우:000,,,5, 신영:000,,,6, NK투자증권:000,,,12, KB증권:000,,,17)
bsis_aset_cd	기초자산코드	String	Y	12	전체일때만 12자리입력(전체:000000000000, KOSPI200:201, KOSDAQ150:150, 삼정전자:005930, KT:030200,,)
rght_tp	권리구분	String	Y	1	0:전체, 1:콜, 2:풋, 3:DC, 4:DP, 5:EX, 6:조기종료콜, 7:조기종료풋
lpcd	LP코드	String	Y	12	전체일때만 12자리입력(전체:000000000000, 한국투자증권:003, 미래대우:005, 신영:006, NK투자증권:012, KB증권:017)
sort_tp	정렬구분	String	Y	1	0:정렬없음, 1:상승율순, 2:상승폭순, 3:하락율순, 4:하락폭순, 5:거래량순, 6:거래대금순, 7:잔존일순
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
elwcnd_qry	ELW조건검색	LIST	N		
- stk_cd	종목코드	String	N	20	
- isscomp_nm	발행사명	String	N	20	
- sqnc	회차	String	N	20	
- base_aset_nm	기초자산명	String	N	20	
- rght_tp	권리구분	String	N	20	
- expr_dt	만기일	String	N	20	
- cur_prc	현재가	String	N	20	
- pre_tp	대비구분	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락율	String	N	20	
- trde_qty	거래량	String	N	20	
- trde_qty_pre	거래량대비	String	N	20	
- trde_prica	거래대금	String	N	20	
- pred_trde_qty	전일거래량	String	N	20	
- sel_bid	매도호가	String	N	20	
- buy_bid	매수호가	String	N	20	
- prty	패리티	String	N	20	
- gear_rt	기어링비율	String	N	20	
- pl_qutr_rt	손익분기율	String	N	20	
- cfp	자본지지점	String	N	20	
- theory_pric	이론가	String	N	20	
- innr_vltl	내재변동성	String	N	20	
- delta	델타	String	N	20	
- lvrg	레버리지	String	N	20	
- exec_pric	행사가격	String	N	20	
- cnvt_rt	전환비율	String	N	20	
- lpposs_rt	LP보유비율	String	N	20	
- pl_qutr_pt	손익분기점	String	N	20	
- fin_trde_dt	최종거래일	String	N	20	
- flo_dt	상장일	String	N	20	
- lpinitlast_suply_dt	LP초종공급일	String	N	20	
- stk_nm	종목명	String	N	20	
- srvive_dys	잔존일수	String	N	20	
- dispty_rt	괴리율	String	N	20	
- lpmmcm_nm	LP회원사명	String	N	20	
- lpmmcm_nm_1	LP회원사명1	String	N	20	
- lpmmcm_nm_2	LP회원사명2	String	N	20	
- xraymont_cntr_qty_arng_trde_tp	Xray순간체결량정리매매구분	String	N	20	
- xraymont_cntr_qty_profa_100tp	Xray순간체결량증거금100구분	String	N	20	



ELW등락율순위요청
ka30009

import requests
import json

# ELW등락율순위요청
def fn_ka30009(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/elw'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka30009', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'sort_tp': '1', # 정렬구분 1:상승률, 2:상승폭, 3:하락률, 4:하락폭
		'rght_tp': '000', # 권리구분 000:전체, 001:콜, 002:풋, 003:DC, 004:DP, 006:조기종료콜, 007:조기종료풋
		'trde_end_skip': '0', # 거래종료제외 1:거래종료제외, 0:거래종료포함
	}

	# 3. API 실행
	fn_ka30009(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka30009(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
sort_tp	정렬구분	String	Y	1	1:상승률, 2:상승폭, 3:하락률, 4:하락폭
rght_tp	권리구분	String	Y	3	000:전체, 001:콜, 002:풋, 003:DC, 004:DP, 006:조기종료콜, 007:조기종료풋
trde_end_skip	거래종료제외	String	Y	1	1:거래종료제외, 0:거래종료포함
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
elwflu_rt_rank	ELW등락율순위	LIST	N		
- rank	순위	String	N	20	
- stk_cd	종목코드	String	N	20	
- stk_nm	종목명	String	N	20	
- cur_prc	현재가	String	N	20	
- pre_sig	대비기호	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락률	String	N	20	
- sel_req	매도잔량	String	N	20	
- buy_req	매수잔량	String	N	20	
- trde_qty	거래량	String	N	20	
- trde_prica	거래대금	String	N	20	

ELW잔량순위요청
ka30010

import requests
import json

# ELW잔량순위요청
def fn_ka30010(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/elw'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka30010', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'sort_tp': '1', # 정렬구분 1:순매수잔량상위, 2: 순매도 잔량상위
		'rght_tp': '000', # 권리구분 000: 전체, 001: 콜, 002: 풋, 003: DC, 004: DP, 006: 조기종료콜, 007: 조기종료풋
		'trde_end_skip': '0', # 거래종료제외 1:거래종료제외, 0:거래종료포함
	}

	# 3. API 실행
	fn_ka30010(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka30010(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
sort_tp	정렬구분	String	Y	1	1:순매수잔량상위, 2: 순매도 잔량상위
rght_tp	권리구분	String	Y	3	000: 전체, 001: 콜, 002: 풋, 003: DC, 004: DP, 006: 조기종료콜, 007: 조기종료풋
trde_end_skip	거래종료제외	String	Y	1	1:거래종료제외, 0:거래종료포함
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
elwreq_rank	ELW잔량순위	LIST	N		
- stk_cd	종목코드	String	N	20	
- rank	순위	String	N	20	
- stk_nm	종목명	String	N	20	
- cur_prc	현재가	String	N	20	
- pre_sig	대비기호	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락률	String	N	20	
- trde_qty	거래량	String	N	20	
- sel_req	매도잔량	String	N	20	
- buy_req	매수잔량	String	N	20	
- netprps_req	순매수잔량	String	N	20	
- trde_prica	거래대금	String	N	20	


ELW근접율요청
ka30011

import requests
import json

# ELW근접율요청
def fn_ka30011(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/elw'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka30011', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'stk_cd': '57JBHH', # 종목코드 
	}

	# 3. API 실행
	fn_ka30011(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka30011(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_cd	종목코드	String	Y	6	
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
elwalacc_rt	ELW근접율	LIST	N		
- stk_cd	종목코드	String	N	20	
- stk_nm	종목명	String	N	20	
- cur_prc	현재가	String	N	20	
- pre_sig	대비기호	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락율	String	N	20	
- acc_trde_qty	누적거래량	String	N	20	
- alacc_rt	근접율	String	N	20	

ELW종목상세정보요청
ka30012

import requests
import json

# ELW종목상세정보요청
def fn_ka30012(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/elw'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka30012', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'stk_cd': '57JBHH', # 종목코드 
	}

	# 3. API 실행
	fn_ka30012(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka30012(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_cd	종목코드	String	Y	6	
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
aset_cd	자산코드	String	N	20	
cur_prc	현재가	String	N	20	
pred_pre_sig	전일대비기호	String	N	20	
pred_pre	전일대비	String	N	20	
flu_rt	등락율	String	N	20	
lpmmcm_nm	LP회원사명	String	N	20	
lpmmcm_nm_1	LP회원사명1	String	N	20	
lpmmcm_nm_2	LP회원사명2	String	N	20	
elwrght_cntn	ELW권리내용	String	N	20	
elwexpr_evlt_pric	ELW만기평가가격	String	N	20	
elwtheory_pric	ELW이론가	String	N	20	
dispty_rt	괴리율	String	N	20	
elwinnr_vltl	ELW내재변동성	String	N	20	
exp_rght_pric	예상권리가	String	N	20	
elwpl_qutr_rt	ELW손익분기율	String	N	20	
elwexec_pric	ELW행사가	String	N	20	
elwcnvt_rt	ELW전환비율	String	N	20	
elwcmpn_rt	ELW보상율	String	N	20	
elwpric_rising_part_rt	ELW가격상승참여율	String	N	20	
elwrght_type	ELW권리유형	String	N	20	
elwsrvive_dys	ELW잔존일수	String	N	20	
stkcnt	주식수	String	N	20	
elwlpord_pos	ELWLP주문가능	String	N	20	
lpposs_rt	LP보유비율	String	N	20	
lprmnd_qty	LP보유수량	String	N	20	
elwspread	ELW스프레드	String	N	20	
elwprty	ELW패리티	String	N	20	
elwgear	ELW기어링	String	N	20	
elwflo_dt	ELW상장일	String	N	20	
elwfin_trde_dt	ELW최종거래일	String	N	20	
expr_dt	만기일	String	N	20	
exec_dt	행사일	String	N	20	
lpsuply_end_dt	LP공급종료일	String	N	20	
elwpay_dt	ELW지급일	String	N	20	
elwinvt_ix_comput	ELW투자지표산출	String	N		
elwpay_agnt	ELW지급대리인	String	N		
elwappr_way	ELW결재방법	String	N		
elwrght_exec_way	ELW권리행사방식	String	N		
elwpblicte_orgn	ELW발행기관	String	N		
dcsn_pay_amt	확정지급액	String	N		
kobarr	KO베리어	String	N		
iv	IV	String	N		
clsprd_end_elwocr	종기종료ELW발생	String	N		
bsis_aset_1	기초자산1	String	N		
bsis_aset_comp_rt_1	기초자산구성비율1	String	N		
bsis_aset_2	기초자산2	String	N		
bsis_aset_comp_rt_2	기초자산구성비율2	String	N		
bsis_aset_3	기초자산3	String	N		
bsis_aset_comp_rt_3	기초자산구성비율3	String	N		
bsis_aset_4	기초자산4	String	N		
bsis_aset_comp_rt_4	기초자산구성비율4	String	N		
bsis_aset_5	기초자산5	String	N		
bsis_aset_comp_rt_5	기초자산구성비율5	String	N		
fr_dt	평가시작일자	String	N		
to_dt	평가종료일자	String	N		
fr_tm	평가시작시간	String	N		
evlt_end_tm	평가종료시간	String	N		
evlt_pric	평가가격	String	N		
evlt_fnsh_yn	평가완료여부	String	N		
all_hgst_pric	전체최고가	String	N		
all_lwst_pric	전체최저가	String	N		
imaf_hgst_pric	직후최고가	String	N		
imaf_lwst_pric	직후최저가	String	N		
sndhalf_mrkt_hgst_pric	후반장최고가	String	N		
sndhalf_mrkt_lwst_pric	후반장최저가	String	N		