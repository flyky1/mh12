주식 매수주문
kt10000

import requests
import json

# 주식 매수주문
def fn_kt10000(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/ordr'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'kt10000', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'dmst_stex_tp': 'KRX', # 국내거래소구분 KRX,NXT,SOR
		'stk_cd': '005930', # 종목코드 
		'ord_qty': '1', # 주문수량 
		'ord_uv': '', # 주문단가 
		'trde_tp': '3', # 매매구분 0:보통 , 3:시장가 , 5:조건부지정가 , 81:장마감후시간외 , 61:장시작전시간외, 62:시간외단일가 , 6:최유리지정가 , 7:최우선지정가 , 10:보통(IOC) , 13:시장가(IOC) , 16:최유리(IOC) , 20:보통(FOK) , 23:시장가(FOK) , 26:최유리(FOK) , 28:스톱지정가,29:중간가,30:중간가(IOC),31:중간가(FOK)
		'cond_uv': '', # 조건단가 
	}

	# 3. API 실행
	fn_kt10000(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_kt10000(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
dmst_stex_tp	국내거래소구분	String	Y	3	KRX,NXT,SOR
stk_cd	종목코드	String	Y	12	
ord_qty	주문수량	String	Y	12	
ord_uv	주문단가	String	N	12	
trde_tp	매매구분	String	Y	2	0:보통 , 3:시장가 , 5:조건부지정가 , 81:장마감후시간외 , 61:장시작전시간외, 62:시간외단일가 , 6:최유리지정가 , 7:최우선지정가 , 10:보통(IOC) , 13:시장가(IOC) , 16:최유리(IOC) , 20:보통(FOK) , 23:시장가(FOK) , 26:최유리(FOK) , 28:스톱지정가,29:중간가,30:중간가(IOC),31:중간가(FOK)
cond_uv	조건단가	String	N	12	
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
ord_no	주문번호	String	N	7	
dmst_stex_tp	국내거래소구분	String	N	6	

주식 매도주문
kt10001

import requests
import json

# 주식 매도주문
def fn_kt10001(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/ordr'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'kt10001', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'dmst_stex_tp': 'KRX', # 국내거래소구분 KRX,NXT,SOR
		'stk_cd': '005930', # 종목코드 
		'ord_qty': '1', # 주문수량 
		'ord_uv': '', # 주문단가 
		'trde_tp': '3', # 매매구분 0:보통 , 3:시장가 , 5:조건부지정가 , 81:장마감후시간외 , 61:장시작전시간외, 62:시간외단일가 , 6:최유리지정가 , 7:최우선지정가 , 10:보통(IOC) , 13:시장가(IOC) , 16:최유리(IOC) , 20:보통(FOK) , 23:시장가(FOK) , 26:최유리(FOK) , 28:스톱지정가,29:중간가,30:중간가(IOC),31:중간가(FOK)
		'cond_uv': '', # 조건단가 
	}

	# 3. API 실행
	fn_kt10001(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_kt10001(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
dmst_stex_tp	국내거래소구분	String	Y	3	KRX,NXT,SOR
stk_cd	종목코드	String	Y	12	
ord_qty	주문수량	String	Y	12	
ord_uv	주문단가	String	N	12	
trde_tp	매매구분	String	Y	2	0:보통 , 3:시장가 , 5:조건부지정가 , 81:장마감후시간외 , 61:장시작전시간외, 62:시간외단일가 , 6:최유리지정가 , 7:최우선지정가 , 10:보통(IOC) , 13:시장가(IOC) , 16:최유리(IOC) , 20:보통(FOK) , 23:시장가(FOK) , 26:최유리(FOK) , 28:스톱지정가,29:중간가,30:중간가(IOC),31:중간가(FOK)
cond_uv	조건단가	String	N	12	
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
ord_no	주문번호	String	N	7	
dmst_stex_tp	국내거래소구분	String	N	6


주식 정정주문
kt10002

import requests
import json

# 주식 정정주문
def fn_kt10002(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/ordr'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'kt10002', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'dmst_stex_tp': 'KRX', # 국내거래소구분 KRX,NXT,SOR
		'orig_ord_no': '0000139', # 원주문번호 
		'stk_cd': '005930', # 종목코드 
		'mdfy_qty': '1', # 정정수량 
		'mdfy_uv': '199700', # 정정단가 
		'mdfy_cond_uv': '', # 정정조건단가 
	}

	# 3. API 실행
	fn_kt10002(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_kt10002(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
dmst_stex_tp	국내거래소구분	String	Y	3	KRX,NXT,SOR
orig_ord_no	원주문번호	String	Y	7	
stk_cd	종목코드	String	Y	12	
mdfy_qty	정정수량	String	Y	12	
mdfy_uv	정정단가	String	Y	12	
mdfy_cond_uv	정정조건단가	String	N	12	
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
ord_no	주문번호	String	N	7	
base_orig_ord_no	모주문번호	String	N	7	
mdfy_qty	정정수량	String	N	12	
dmst_stex_tp	국내거래소구분	String	N	6	

주식 취소주문
kt10003


import requests
import json

# 주식 취소주문
def fn_kt10003(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/ordr'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'kt10003', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'dmst_stex_tp': 'KRX', # 국내거래소구분 KRX,NXT,SOR
		'orig_ord_no': '0000140', # 원주문번호 
		'stk_cd': '005930', # 종목코드 
		'cncl_qty': '1', # 취소수량 '0' 입력시 잔량 전부 취소
	}

	# 3. API 실행
	fn_kt10003(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_kt10003(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
dmst_stex_tp	국내거래소구분	String	Y	3	KRX,NXT,SOR
orig_ord_no	원주문번호	String	Y	7	
stk_cd	종목코드	String	Y	12	
cncl_qty	취소수량	String	Y	12	'0' 입력시 잔량 전부 취소
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
ord_no	주문번호	String	N	7	
base_orig_ord_no	모주문번호	String	N	7	
cncl_qty	취소수량	String	N	12	
