업종프로그램요청
ka10010

import requests
import json

# 업종프로그램요청
def fn_ka10010(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/sect'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10010', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'stk_cd': '005930', # 종목코드 거래소별 종목코드 (KRX:039490,NXT:039490_NX,SOR:039490_AL)
	}

	# 3. API 실행
	fn_ka10010(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10010(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
stk_cd	종목코드	String	Y	20	거래소별 종목코드
(KRX:039490,NXT:039490_NX,SOR:039490_AL)
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
dfrt_trst_sell_qty	차익위탁매도수량	String	N	20	
dfrt_trst_sell_amt	차익위탁매도금액	String	N	20	
dfrt_trst_buy_qty	차익위탁매수수량	String	N	20	
dfrt_trst_buy_amt	차익위탁매수금액	String	N	20	
dfrt_trst_netprps_qty	차익위탁순매수수량	String	N	20	
dfrt_trst_netprps_amt	차익위탁순매수금액	String	N	20	
ndiffpro_trst_sell_qty	비차익위탁매도수량	String	N	20	
ndiffpro_trst_sell_amt	비차익위탁매도금액	String	N	20	
ndiffpro_trst_buy_qty	비차익위탁매수수량	String	N	20	
ndiffpro_trst_buy_amt	비차익위탁매수금액	String	N	20	
ndiffpro_trst_netprps_qty	비차익위탁순매수수량	String	N	20	
ndiffpro_trst_netprps_amt	비차익위탁순매수금액	String	N	20	
all_dfrt_trst_sell_qty	전체차익위탁매도수량	String	N	20	
all_dfrt_trst_sell_amt	전체차익위탁매도금액	String	N	20	
all_dfrt_trst_buy_qty	전체차익위탁매수수량	String	N	20	
all_dfrt_trst_buy_amt	전체차익위탁매수금액	String	N	20	
all_dfrt_trst_netprps_qty	전체차익위탁순매수수량	String	N	20	
all_dfrt_trst_netprps_amt	전체차익위탁순매수금액	String	N	20	

업종별투자자순매수요청
ka10051

import requests
import json

# 업종별투자자순매수요청
def fn_ka10051(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/sect'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka10051', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'mrkt_tp': '0', # 시장구분 코스피:0, 코스닥:1
		'amt_qty_tp': '0', # 금액수량구분 금액:0, 수량:1
		'base_dt': '20241107', # 기준일자 YYYYMMDD
		'stex_tp': '3', # 거래소구분 1:KRX, 2:NXT, 3:통합
	}

	# 3. API 실행
	fn_ka10051(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka10051(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
mrkt_tp	시장구분	String	Y	1	코스피:0, 코스닥:1
amt_qty_tp	금액수량구분	String	Y	1	금액:0, 수량:1
base_dt	기준일자	String	N	8	YYYYMMDD
stex_tp	거래소구분	String	Y	1	1:KRX, 2:NXT, 3:통합
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
inds_netprps	업종별순매수	LIST	N		
- inds_cd	업종코드	String	N	20	
- inds_nm	업종명	String	N	20	
- cur_prc	현재가	String	N	20	
- pre_smbol	대비부호	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락율	String	N	20	
- trde_qty	거래량	String	N	20	
- sc_netprps	증권순매수	String	N	20	
- insrnc_netprps	보험순매수	String	N	20	
- invtrt_netprps	투신순매수	String	N	20	
- bank_netprps	은행순매수	String	N	20	
- jnsinkm_netprps	종신금순매수	String	N	20	
- endw_netprps	기금순매수	String	N	20	
- etc_corp_netprps	기타법인순매수	String	N	20	
- ind_netprps	개인순매수	String	N	20	
- frgnr_netprps	외국인순매수	String	N	20	
- native_trmt_frgnr_netprps	내국인대우외국인순매수	String	N	20	
- natn_netprps	국가순매수	String	N	20	
- samo_fund_netprps	사모펀드순매수	String	N	20	
- orgn_netprps	기관계순매수	String	N	20	

업종현재가요청
ka20001

import requests
import json

# 업종현재가요청
def fn_ka20001(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/sect'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka20001', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'mrkt_tp': '0', # 시장구분 0:코스피, 1:코스닥, 2:코스피200
		'inds_cd': '001', # 업종코드 001:종합(KOSPI), 002:대형주, 003:중형주, 004:소형주 101:종합(KOSDAQ), 201:KOSPI200, 302:KOSTAR, 701: KRX100 나머지 ※ 업종코드 참고
	}

	# 3. API 실행
	fn_ka20001(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka20001(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
mrkt_tp	시장구분	String	Y	1	0:코스피, 1:코스닥, 2:코스피200
inds_cd	업종코드	String	Y	3	001:종합(KOSPI), 002:대형주, 003:중형주, 004:소형주 101:종합(KOSDAQ), 201:KOSPI200, 302:KOSTAR, 701: KRX100 나머지 ※ 업종코드 참고
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
cur_prc	현재가	String	N	20	
pred_pre_sig	전일대비기호	String	N	20	
pred_pre	전일대비	String	N	20	
flu_rt	등락률	String	N	20	
trde_qty	거래량	String	N	20	
trde_prica	거래대금	String	N	20	
trde_frmatn_stk_num	거래형성종목수	String	N	20	
trde_frmatn_rt	거래형성비율	String	N	20	
open_pric	시가	String	N	20	
high_pric	고가	String	N	20	
low_pric	저가	String	N	20	
upl	상한	String	N	20	
rising	상승	String	N	20	
stdns	보합	String	N	20	
fall	하락	String	N	20	
lst	하한	String	N	20	
52wk_hgst_pric	52주최고가	String	N	20	
52wk_hgst_pric_dt	52주최고가일	String	N	20	
52wk_hgst_pric_pre_rt	52주최고가대비율	String	N	20	
52wk_lwst_pric	52주최저가	String	N	20	
52wk_lwst_pric_dt	52주최저가일	String	N	20	
52wk_lwst_pric_pre_rt	52주최저가대비율	String	N	20	
inds_cur_prc_tm	업종현재가_시간별	LIST	N		
- tm_n	시간n	String	N	20	
- cur_prc_n	현재가n	String	N	20	
- pred_pre_sig_n	전일대비기호n	String	N	20	
- pred_pre_n	전일대비n	String	N	20	
- flu_rt_n	등락률n	String	N	20	
- trde_qty_n	거래량n	String	N	20	
- acc_trde_qty_n	누적거래량n	String	N	20	


업종별주가요청
ka20002

import requests
import json

# 업종별주가요청
def fn_ka20002(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/sect'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka20002', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'mrkt_tp': '0', # 시장구분 0:코스피, 1:코스닥, 2:코스피200
		'inds_cd': '001', # 업종코드 001:종합(KOSPI), 002:대형주, 003:중형주, 004:소형주 101:종합(KOSDAQ), 201:KOSPI200, 302:KOSTAR, 701: KRX100 나머지 ※ 업종코드 참고
		'stex_tp': '1', # 거래소구분 1:KRX, 2:NXT, 3:통합
	}

	# 3. API 실행
	fn_ka20002(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka20002(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
mrkt_tp	시장구분	String	Y	1	0:코스피, 1:코스닥, 2:코스피200
inds_cd	업종코드	String	Y	3	001:종합(KOSPI), 002:대형주, 003:중형주, 004:소형주 101:종합(KOSDAQ), 201:KOSPI200, 302:KOSTAR, 701: KRX100 나머지 ※ 업종코드 참고
stex_tp	거래소구분	String	Y	1	1:KRX, 2:NXT, 3:통합
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
inds_stkpc	업종별주가	LIST	N		
- stk_cd	종목코드	String	N	20	
- stk_nm	종목명	String	N	20	
- cur_prc	현재가	String	N	20	
- pred_pre_sig	전일대비기호	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락률	String	N	20	
- now_trde_qty	현재거래량	String	N	20	
- sel_bid	매도호가	String	N	20	
- buy_bid	매수호가	String	N	20	
- open_pric	시가	String	N	20	
- high_pric	고가	String	N	20	
- low_pric	저가	String	N	20	

전업종지수요청
ka20003

import requests
import json

# 전업종지수요청
def fn_ka20003(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/sect'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka20003', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'inds_cd': '001', # 업종코드 001:종합(KOSPI), 002:대형주, 003:중형주, 004:소형주 101:종합(KOSDAQ), 201:KOSPI200, 302:KOSTAR, 701: KRX100 나머지 ※ 업종코드 참고
	}

	# 3. API 실행
	fn_ka20003(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka20003(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
inds_cd	업종코드	String	Y	3	001:종합(KOSPI), 002:대형주, 003:중형주, 004:소형주 101:종합(KOSDAQ), 201:KOSPI200, 302:KOSTAR, 701: KRX100 나머지 ※ 업종코드 참고
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
all_inds_idex	전업종지수	LIST	N		
- stk_cd	종목코드	String	N	20	
- stk_nm	종목명	String	N	20	
- cur_prc	현재가	String	N	20	
- pre_sig	대비기호	String	N	20	
- pred_pre	전일대비	String	N	20	
- flu_rt	등락률	String	N	20	
- trde_qty	거래량	String	N	20	
- wght	비중	String	N	20	
- trde_prica	거래대금	String	N	20	
- upl	상한	String	N	20	
- rising	상승	String	N	20	
- stdns	보합	String	N	20	
- fall	하락	String	N	20	
- lst	하한	String	N	20	
- flo_stk_num	상장종목수	String	N	20

업종현재가일별요청
ka20009

import requests
import json

# 업종현재가일별요청
def fn_ka20009(token, data, cont_yn='N', next_key=''):
	# 1. 요청할 API URL
	#host = 'https://mockapi.kiwoom.com' # 모의투자
	host = 'https://api.kiwoom.com' # 실전투자
	endpoint = '/api/dostk/sect'
	url =  host + endpoint

	# 2. header 데이터
	headers = {
		'Content-Type': 'application/json;charset=UTF-8', # 컨텐츠타입
		'authorization': f'Bearer {token}', # 접근토큰
		'cont-yn': cont_yn, # 연속조회여부
		'next-key': next_key, # 연속조회키
		'api-id': 'ka20009', # TR명
	}

	# 3. http POST 요청
	response = requests.post(url, headers=headers, json=data)

	# 4. 응답 상태 코드와 데이터 출력
	print('Code:', response.status_code)
	print('Header:', json.dumps({key: response.headers.get(key) for key in ['next-key', 'cont-yn', 'api-id']}, indent=4, ensure_ascii=False))
	print('Body:', json.dumps(response.json(), indent=4, ensure_ascii=False))  # JSON 응답을 파싱하여 출력

# 실행 구간
if __name__ == '__main__':
	# 1. 토큰 설정
	MY_ACCESS_TOKEN = '사용자 AccessToken'# 접근토큰

	# 2. 요청 데이터
	params = {
		'mrkt_tp': '0', # 시장구분 0:코스피, 1:코스닥, 2:코스피200
		'inds_cd': '001', # 업종코드 001:종합(KOSPI), 002:대형주, 003:중형주, 004:소형주 101:종합(KOSDAQ), 201:KOSPI200, 302:KOSTAR, 701: KRX100 나머지 ※ 업종코드 참고
	}

	# 3. API 실행
	fn_ka20009(token=MY_ACCESS_TOKEN, data=params)

	# next-key, cont-yn 값이 있을 경우
	# fn_ka20009(token=MY_ACCESS_TOKEN, data=params, cont_yn='Y', next_key='nextkey..')

요청
Header
Element	한글명	type	Required	Length	Description
authorization	접근토큰	String	Y	1000	토큰 지정시 토큰타입("Bearer") 붙혀서 호출
예) Bearer Egicyx...
cont-yn	연속조회여부	String	N	1	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 cont-yn값 세팅
next-key	연속조회키	String	N	50	응답 Header의 연속조회여부값이 Y일 경우 다음데이터 요청시 응답 Header의 next-key값 세팅
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
mrkt_tp	시장구분	String	Y	1	0:코스피, 1:코스닥, 2:코스피200
inds_cd	업종코드	String	Y	3	001:종합(KOSPI), 002:대형주, 003:중형주, 004:소형주 101:종합(KOSDAQ), 201:KOSPI200, 302:KOSTAR, 701: KRX100 나머지 ※ 업종코드 참고
응답
Header
Element	한글명	type	Required	Length	Description
cont-yn	연속조회여부	String	N	1	다음 데이터가 있을시 Y값 전달
next-key	연속조회키	String	N	50	다음 데이터가 있을시 다음 키값 전달
api-id	TR명	String	Y	10	
Body
Element	한글명	type	Required	Length	Description
cur_prc	현재가	String	N	20	
pred_pre_sig	전일대비기호	String	N	20	
pred_pre	전일대비	String	N	20	
flu_rt	등락률	String	N	20	
trde_qty	거래량	String	N	20	
trde_prica	거래대금	String	N	20	
trde_frmatn_stk_num	거래형성종목수	String	N	20	
trde_frmatn_rt	거래형성비율	String	N	20	
open_pric	시가	String	N	20	
high_pric	고가	String	N	20	
low_pric	저가	String	N	20	
upl	상한	String	N	20	
rising	상승	String	N	20	
stdns	보합	String	N	20	
fall	하락	String	N	20	
lst	하한	String	N	20	
52wk_hgst_pric	52주최고가	String	N	20	
52wk_hgst_pric_dt	52주최고가일	String	N	20	
52wk_hgst_pric_pre_rt	52주최고가대비율	String	N	20	
52wk_lwst_pric	52주최저가	String	N	20	
52wk_lwst_pric_dt	52주최저가일	String	N	20	
52wk_lwst_pric_pre_rt	52주최저가대비율	String	N	20	
inds_cur_prc_daly_rept	업종현재가_일별반복	LIST	N		
- dt_n	일자n	String	N	20	
- cur_prc_n	현재가n	String	N	20	
- pred_pre_sig_n	전일대비기호n	String	N	20	
- pred_pre_n	전일대비n	String	N	20	
- flu_rt_n	등락률n	String	N	20	
- acc_trde_qty_n	누적거래량n	String	N	20	